{
	"info": {
		"_postman_id": "6cf94efd-6710-4ded-87d9-11551085c164",
		"name": "APIHUB",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20728285"
	},
	"item": [
		{
			"name": "amap_district",
			"item": [
				{
					"name": "amap_district_广东",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.environment.get(\"city\");\r",
									"// console.log(pm.environment.get(\"city\"));\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"districts\");\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"city\"));\r",
									"    pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.districts[0].adcode).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.districts[0].center).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.districts[0].citycode).to.be.a(\"array\");\r",
									"    pm.expect(jsonData.districts[0].districts).to.be.a(\"array\");\r",
									"    pm.expect(jsonData.districts[0].level).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.districts[0].name).to.be.a(\"string\");  \r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"Quary amap district response schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"count\": {\"type\": \"string\"},  // 包含error_code,类型为number\r",
									"        \"districts\": {\"type\": \"array\", \r",
									"                      \"items\": [{\"type\": \"object\"}, \r",
									"                                {\"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},    //最好罗列下enmu的值city什么的\r",
									"                                                \"name\": {\"type\": \"string\", \"pattern\": city}   //这个地方怎么和入参关联也要学习一下\r",
									"                                                }\r",
									"                                },\r",
									"                        ],\r",
									"                        \"additionalItems\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},\r",
									"                                                \"name\": {\"type\": \"string\",\"pattern\": city}   //和入参关联\r",
									"                                                }                               \r",
									"                        },                         \r",
									"                       \"minItems\": 1,\r",
									"                    //    \"maxItems\": 2\r",
									"                       },\r",
									"        \"info\": {\"type\": \"string\"},\r",
									"        \"infocode\": {\"type\":\"string\", \r",
									"                     \"maxLength\": 5},\r",
									"        \"status\": {\"type\": \"string\"},\r",
									"        \"suggestion\": {\"type\": \"object\"},\r",
									"    },\r",
									"    \"require\": [\"count\", \"districts\", \"info\", \"infocode\", \"status\"] // 结构中必须包含error_code和data   \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"// pm.test('Schema is valid', function() {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"// });\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.info).to.eql(\"OK\");\r",
									"    pm.expect(jsonData.status).to.eql(\"1\");\r",
									"    // pm.expect(jsonData.districts[0].name).to.eql(city);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json; charset=utf-8\", function() {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"广东\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_district",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_district"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_district_北京",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.environment.get(\"city\");\r",
									"// console.log(pm.environment.get(\"city\"));\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"districts\");\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"city\"));\r",
									"    pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"Quary amap district response schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        // \"count\": {\"type\": \"number\"},  // 包含error_code,类型为number\r",
									"        \"districts\": {\"type\": \"array\", \r",
									"                      \"items\": [{\"type\": \"object\"}, \r",
									"                                {\"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},    //最好罗列下enmu的值city什么的\r",
									"                                                \"name\": {\"type\": \"string\", \"pattern\": city}   //这个地方怎么和入参关联也要学习一下\r",
									"                                                }\r",
									"                                },\r",
									"                        ],\r",
									"                        \"additionalItems\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},\r",
									"                                                \"name\": {\"type\": \"string\",\"pattern\": city}   //和入参关联\r",
									"                                                }                               \r",
									"                        },                         \r",
									"                       \"minItems\": 1,\r",
									"                    //    \"maxItems\": 2\r",
									"                       },\r",
									"        \"info\": {\"type\": \"string\"},\r",
									"        \"infocode\": {\"type\":\"string\", \r",
									"                     \"maxLength\": 5},\r",
									"        \"status\": {\"type\": \"string\"},\r",
									"        \"suggestion\": {\"type\": \"object\"},\r",
									"    },\r",
									"    \"require\": [\"count\", \"districts\", \"info\", \"infocode\", \"status\"] // 结构中必须包含error_code和data   \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"// pm.test('Schema is valid', function() {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"// });\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.info).to.eql(\"OK\");\r",
									"    pm.expect(jsonData.status).to.eql(\"1\");\r",
									"    // pm.expect(jsonData.districts[0].name).to.eql(city);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"北京\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_district",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_district"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_district_深圳",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.environment.get(\"city\");\r",
									"// console.log(pm.environment.get(\"city\"));\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"districts\");\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"city\"));\r",
									"    pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"Quary amap district response schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        // \"count\": {\"type\": \"number\"},  // 包含error_code,类型为number\r",
									"        \"districts\": {\"type\": \"array\", \r",
									"                      \"items\": [{\"type\": \"object\"}, \r",
									"                                {\"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},    //最好罗列下enmu的值city什么的\r",
									"                                                \"name\": {\"type\": \"string\", \"pattern\": city}   //这个地方怎么和入参关联也要学习一下\r",
									"                                                }\r",
									"                                },\r",
									"                        ],\r",
									"                        \"additionalItems\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},\r",
									"                                                \"name\": {\"type\": \"string\",\"pattern\": city}   //和入参关联\r",
									"                                                }                               \r",
									"                        },                         \r",
									"                       \"minItems\": 1,\r",
									"                    //    \"maxItems\": 2\r",
									"                       },\r",
									"        \"info\": {\"type\": \"string\"},\r",
									"        \"infocode\": {\"type\":\"string\", \r",
									"                     \"maxLength\": 5},\r",
									"        \"status\": {\"type\": \"string\"},\r",
									"        \"suggestion\": {\"type\": \"object\"},\r",
									"    },\r",
									"    \"require\": [\"count\", \"districts\", \"info\", \"infocode\", \"status\"] // 结构中必须包含error_code和data   \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"// pm.test('Schema is valid', function() {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"// });\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.info).to.eql(\"OK\");\r",
									"    pm.expect(jsonData.status).to.eql(\"1\");\r",
									"    // pm.expect(jsonData.districts[0].name).to.eql(city);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"深圳\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_district",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_district"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_district_山",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.environment.get(\"city\");\r",
									"// console.log(pm.environment.get(\"city\"));\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"districts\");\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"city\"));\r",
									"    pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"Quary amap district response schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        // \"count\": {\"type\": \"number\"},  // 包含error_code,类型为number\r",
									"        \"districts\": {\"type\": \"array\", \r",
									"                      \"items\": [{\"type\": \"object\"}, \r",
									"                                {\"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},    //最好罗列下enmu的值city什么的\r",
									"                                                \"name\": {\"type\": \"string\", \"pattern\": city}   //这个地方怎么和入参关联也要学习一下\r",
									"                                                }\r",
									"                                },\r",
									"                        ],\r",
									"                        \"additionalItems\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},\r",
									"                                                \"name\": {\"type\": \"string\",\"pattern\": city}   //和入参关联\r",
									"                                                }                               \r",
									"                        },                         \r",
									"                       \"minItems\": 1,\r",
									"                    //    \"maxItems\": 2\r",
									"                       },\r",
									"        \"info\": {\"type\": \"string\"},\r",
									"        \"infocode\": {\"type\":\"string\", \r",
									"                     \"maxLength\": 5},\r",
									"        \"status\": {\"type\": \"string\"},\r",
									"        \"suggestion\": {\"type\": \"object\"},\r",
									"    },\r",
									"    \"require\": [\"count\", \"districts\", \"info\", \"infocode\", \"status\"] // 结构中必须包含error_code和data   \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"// pm.test('Schema is valid', function() {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"// });\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.info).to.eql(\"OK\");\r",
									"    pm.expect(jsonData.status).to.eql(\"1\");\r",
									"    // pm.expect(jsonData.districts[0].name).to.eql(city);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"山\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_district",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_district"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "amap_district_v1",
			"item": [
				{
					"name": "amap_district_v1_广东",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.environment.get(\"city\");\r",
									"// console.log(pm.environment.get(\"city\"));\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"districts\");\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"city\"));\r",
									"    pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.districts[0].adcode).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.districts[0].center).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.districts[0].citycode).to.be.a(\"array\");\r",
									"    pm.expect(jsonData.districts[0].districts).to.be.a(\"array\");\r",
									"    pm.expect(jsonData.districts[0].level).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.districts[0].name).to.be.a(\"string\");  \r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"Quary amap district response schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"count\": {\"type\": \"string\"},  // 包含error_code,类型为number\r",
									"        \"districts\": {\"type\": \"array\", \r",
									"                      \"items\": [{\"type\": \"object\"}, \r",
									"                                {\"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},    //最好罗列下enmu的值city什么的\r",
									"                                                \"name\": {\"type\": \"string\", \"pattern\": city}   //这个地方怎么和入参关联也要学习一下\r",
									"                                                }\r",
									"                                },\r",
									"                        ],\r",
									"                        \"additionalItems\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},\r",
									"                                                \"name\": {\"type\": \"string\",\"pattern\": city}   //和入参关联\r",
									"                                                }                               \r",
									"                        },                         \r",
									"                       \"minItems\": 1,\r",
									"                    //    \"maxItems\": 2\r",
									"                       },\r",
									"        \"info\": {\"type\": \"string\"},\r",
									"        \"infocode\": {\"type\":\"string\", \r",
									"                     \"maxLength\": 5},\r",
									"        \"status\": {\"type\": \"string\"},\r",
									"        \"suggestion\": {\"type\": \"object\"},\r",
									"    },\r",
									"    \"require\": [\"count\", \"districts\", \"info\", \"infocode\", \"status\"] // 结构中必须包含error_code和data   \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"// pm.test('Schema is valid', function() {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"// });\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.info).to.eql(\"OK\");\r",
									"    pm.expect(jsonData.status).to.eql(\"1\");\r",
									"    // pm.expect(jsonData.districts[0].name).to.eql(city);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json; charset=utf-8\", function() {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"广东\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_district/v1",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_district",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_district_v1_北京",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.environment.get(\"city\");\r",
									"// console.log(pm.environment.get(\"city\"));\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"districts\");\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"city\"));\r",
									"    pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"Quary amap district response schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        // \"count\": {\"type\": \"number\"},  // 包含error_code,类型为number\r",
									"        \"districts\": {\"type\": \"array\", \r",
									"                      \"items\": [{\"type\": \"object\"}, \r",
									"                                {\"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},    //最好罗列下enmu的值city什么的\r",
									"                                                \"name\": {\"type\": \"string\", \"pattern\": city}   //这个地方怎么和入参关联也要学习一下\r",
									"                                                }\r",
									"                                },\r",
									"                        ],\r",
									"                        \"additionalItems\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},\r",
									"                                                \"name\": {\"type\": \"string\",\"pattern\": city}   //和入参关联\r",
									"                                                }                               \r",
									"                        },                         \r",
									"                       \"minItems\": 1,\r",
									"                    //    \"maxItems\": 2\r",
									"                       },\r",
									"        \"info\": {\"type\": \"string\"},\r",
									"        \"infocode\": {\"type\":\"string\", \r",
									"                     \"maxLength\": 5},\r",
									"        \"status\": {\"type\": \"string\"},\r",
									"        \"suggestion\": {\"type\": \"object\"},\r",
									"    },\r",
									"    \"require\": [\"count\", \"districts\", \"info\", \"infocode\", \"status\"] // 结构中必须包含error_code和data   \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"// pm.test('Schema is valid', function() {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"// });\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.info).to.eql(\"OK\");\r",
									"    pm.expect(jsonData.status).to.eql(\"1\");\r",
									"    // pm.expect(jsonData.districts[0].name).to.eql(city);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"北京\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_district/v1",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_district",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_district_v1_深圳",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.environment.get(\"city\");\r",
									"// console.log(pm.environment.get(\"city\"));\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"districts\");\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"city\"));\r",
									"    pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"Quary amap district response schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        // \"count\": {\"type\": \"number\"},  // 包含error_code,类型为number\r",
									"        \"districts\": {\"type\": \"array\", \r",
									"                      \"items\": [{\"type\": \"object\"}, \r",
									"                                {\"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},    //最好罗列下enmu的值city什么的\r",
									"                                                \"name\": {\"type\": \"string\", \"pattern\": city}   //这个地方怎么和入参关联也要学习一下\r",
									"                                                }\r",
									"                                },\r",
									"                        ],\r",
									"                        \"additionalItems\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},\r",
									"                                                \"name\": {\"type\": \"string\",\"pattern\": city}   //和入参关联\r",
									"                                                }                               \r",
									"                        },                         \r",
									"                       \"minItems\": 1,\r",
									"                    //    \"maxItems\": 2\r",
									"                       },\r",
									"        \"info\": {\"type\": \"string\"},\r",
									"        \"infocode\": {\"type\":\"string\", \r",
									"                     \"maxLength\": 5},\r",
									"        \"status\": {\"type\": \"string\"},\r",
									"        \"suggestion\": {\"type\": \"object\"},\r",
									"    },\r",
									"    \"require\": [\"count\", \"districts\", \"info\", \"infocode\", \"status\"] // 结构中必须包含error_code和data   \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"// pm.test('Schema is valid', function() {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"// });\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.info).to.eql(\"OK\");\r",
									"    pm.expect(jsonData.status).to.eql(\"1\");\r",
									"    // pm.expect(jsonData.districts[0].name).to.eql(city);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"深圳\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_district/v1",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_district",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_district_v1_山",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.environment.get(\"city\");\r",
									"// console.log(pm.environment.get(\"city\"));\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"districts\");\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"city\"));\r",
									"    pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"Quary amap district response schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        // \"count\": {\"type\": \"number\"},  // 包含error_code,类型为number\r",
									"        \"districts\": {\"type\": \"array\", \r",
									"                      \"items\": [{\"type\": \"object\"}, \r",
									"                                {\"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},    //最好罗列下enmu的值city什么的\r",
									"                                                \"name\": {\"type\": \"string\", \"pattern\": city}   //这个地方怎么和入参关联也要学习一下\r",
									"                                                }\r",
									"                                },\r",
									"                        ],\r",
									"                        \"additionalItems\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},\r",
									"                                                \"name\": {\"type\": \"string\",\"pattern\": city}   //和入参关联\r",
									"                                                }                               \r",
									"                        },                         \r",
									"                       \"minItems\": 1,\r",
									"                    //    \"maxItems\": 2\r",
									"                       },\r",
									"        \"info\": {\"type\": \"string\"},\r",
									"        \"infocode\": {\"type\":\"string\", \r",
									"                     \"maxLength\": 5},\r",
									"        \"status\": {\"type\": \"string\"},\r",
									"        \"suggestion\": {\"type\": \"object\"},\r",
									"    },\r",
									"    \"require\": [\"count\", \"districts\", \"info\", \"infocode\", \"status\"] // 结构中必须包含error_code和data   \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"// pm.test('Schema is valid', function() {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"// });\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.info).to.eql(\"OK\");\r",
									"    pm.expect(jsonData.status).to.eql(\"1\");\r",
									"    // pm.expect(jsonData.districts[0].name).to.eql(city);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"山\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_district/v1",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_district",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "amap_district_test",
			"item": [
				{
					"name": "amap_district_test_北京",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.environment.get(\"city\");\r",
									"// console.log(pm.environment.get(\"city\"));\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"districts\");\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"city\"));\r",
									"    pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"     pm.response.to.have.jsonBody(\"\");\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"Quary amap district response schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        // \"count\": {\"type\": \"number\"},  // 包含error_code,类型为number\r",
									"        \"districts\": {\"type\": \"array\", \r",
									"                      \"items\": [{\"type\": \"object\"}, \r",
									"                                {\"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},    //最好罗列下enmu的值city什么的\r",
									"                                                \"name\": {\"type\": \"string\", \"pattern\": city}   //这个地方怎么和入参关联也要学习一下\r",
									"                                                }\r",
									"                                },\r",
									"                        ],\r",
									"                        \"additionalItems\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},\r",
									"                                                \"name\": {\"type\": \"string\",\"pattern\": city}   //和入参关联\r",
									"                                                }                               \r",
									"                        },                         \r",
									"                       \"minItems\": 1,\r",
									"                    //    \"maxItems\": 2\r",
									"                       },\r",
									"        \"info\": {\"type\": \"string\"},\r",
									"        \"infocode\": {\"type\":\"string\", \r",
									"                     \"maxLength\": 5},\r",
									"        \"status\": {\"type\": \"string\"},\r",
									"        \"suggestion\": {\"type\": \"object\"},\r",
									"    },\r",
									"    \"require\": [\"count\", \"districts\", \"info\", \"infocode\", \"status\"] // 结构中必须包含error_code和data   \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"// pm.test('Schema is valid', function() {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"// });\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.info).to.eql(\"OK\");\r",
									"    pm.expect(jsonData.status).to.eql(\"1\");\r",
									"    // pm.expect(jsonData.districts[0].name).to.eql(city);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"北京\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_district_test",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_district_test"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_district_test_江苏",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.environment.get(\"city\");\r",
									"// console.log(pm.environment.get(\"city\"));\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"districts\");\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"city\"));\r",
									"    pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"     pm.response.to.have.jsonBody(\"\");\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"Quary amap district response schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        // \"count\": {\"type\": \"number\"},  // 包含error_code,类型为number\r",
									"        \"districts\": {\"type\": \"array\", \r",
									"                      \"items\": [{\"type\": \"object\"}, \r",
									"                                {\"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},    //最好罗列下enmu的值city什么的\r",
									"                                                \"name\": {\"type\": \"string\", \"pattern\": city}   //这个地方怎么和入参关联也要学习一下\r",
									"                                                }\r",
									"                                },\r",
									"                        ],\r",
									"                        \"additionalItems\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},\r",
									"                                                \"name\": {\"type\": \"string\",\"pattern\": city}   //和入参关联\r",
									"                                                }                               \r",
									"                        },                         \r",
									"                       \"minItems\": 1,\r",
									"                    //    \"maxItems\": 2\r",
									"                       },\r",
									"        \"info\": {\"type\": \"string\"},\r",
									"        \"infocode\": {\"type\":\"string\", \r",
									"                     \"maxLength\": 5},\r",
									"        \"status\": {\"type\": \"string\"},\r",
									"        \"suggestion\": {\"type\": \"object\"},\r",
									"    },\r",
									"    \"require\": [\"count\", \"districts\", \"info\", \"infocode\", \"status\"] // 结构中必须包含error_code和data   \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"// pm.test('Schema is valid', function() {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"// });\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.info).to.eql(\"OK\");\r",
									"    pm.expect(jsonData.status).to.eql(\"1\");\r",
									"    // pm.expect(jsonData.districts[0].name).to.eql(city);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"江苏\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_district_test",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_district_test"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_district_test_成都",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.environment.get(\"city\");\r",
									"// console.log(pm.environment.get(\"city\"));\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"districts\");\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"city\"));\r",
									"    pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"     pm.response.to.have.jsonBody(\"\");\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"Quary amap district response schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        // \"count\": {\"type\": \"number\"},  // 包含error_code,类型为number\r",
									"        \"districts\": {\"type\": \"array\", \r",
									"                      \"items\": [{\"type\": \"object\"}, \r",
									"                                {\"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},    //最好罗列下enmu的值city什么的\r",
									"                                                \"name\": {\"type\": \"string\", \"pattern\": city}   //这个地方怎么和入参关联也要学习一下\r",
									"                                                }\r",
									"                                },\r",
									"                        ],\r",
									"                        \"additionalItems\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},\r",
									"                                                \"name\": {\"type\": \"string\",\"pattern\": city}   //和入参关联\r",
									"                                                }                               \r",
									"                        },                         \r",
									"                       \"minItems\": 1,\r",
									"                    //    \"maxItems\": 2\r",
									"                       },\r",
									"        \"info\": {\"type\": \"string\"},\r",
									"        \"infocode\": {\"type\":\"string\", \r",
									"                     \"maxLength\": 5},\r",
									"        \"status\": {\"type\": \"string\"},\r",
									"        \"suggestion\": {\"type\": \"object\"},\r",
									"    },\r",
									"    \"require\": [\"count\", \"districts\", \"info\", \"infocode\", \"status\"] // 结构中必须包含error_code和data   \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"// pm.test('Schema is valid', function() {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"// });\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.info).to.eql(\"OK\");\r",
									"    pm.expect(jsonData.status).to.eql(\"1\");\r",
									"    // pm.expect(jsonData.districts[0].name).to.eql(city);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"成都\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_district_test",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_district_test"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_district_test_湖",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.environment.get(\"city\");\r",
									"// console.log(pm.environment.get(\"city\"));\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"districts\");\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"city\"));\r",
									"    pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"     pm.response.to.have.jsonBody(\"\");\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"Quary amap district response schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        // \"count\": {\"type\": \"number\"},  // 包含error_code,类型为number\r",
									"        \"districts\": {\"type\": \"array\", \r",
									"                      \"items\": [{\"type\": \"object\"}, \r",
									"                                {\"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},    //最好罗列下enmu的值city什么的\r",
									"                                                \"name\": {\"type\": \"string\", \"pattern\": city}   //这个地方怎么和入参关联也要学习一下\r",
									"                                                }\r",
									"                                },\r",
									"                        ],\r",
									"                        \"additionalItems\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},\r",
									"                                                \"name\": {\"type\": \"string\",\"pattern\": city}   //和入参关联\r",
									"                                                }                               \r",
									"                        },                         \r",
									"                       \"minItems\": 1,\r",
									"                    //    \"maxItems\": 2\r",
									"                       },\r",
									"        \"info\": {\"type\": \"string\"},\r",
									"        \"infocode\": {\"type\":\"string\", \r",
									"                     \"maxLength\": 5},\r",
									"        \"status\": {\"type\": \"string\"},\r",
									"        \"suggestion\": {\"type\": \"object\"},\r",
									"    },\r",
									"    \"require\": [\"count\", \"districts\", \"info\", \"infocode\", \"status\"] // 结构中必须包含error_code和data   \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"// pm.test('Schema is valid', function() {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"// });\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.info).to.eql(\"OK\");\r",
									"    pm.expect(jsonData.status).to.eql(\"1\");\r",
									"    // pm.expect(jsonData.districts[0].name).to.eql(city);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"湖\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_district_test",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_district_test"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_district_test_batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody)\r",
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string districts\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"districts\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"});\r",
									"// pm.test(\"Body matches string\", function () {\r",
									"//     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"// });\r",
									"\r",
									"// pm.test(\"Body is correct\", function () {\r",
									"//     pm.response.to.have.body(\"广州\");\r",
									"// });\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.value).to.eql(100);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"// pm.test(\"Successful POST request\", function () {\r",
									"//     pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"// });\r",
									"// var jsonObject = xml2Json(responseBody);\r",
									"// var schema = {\r",
									"//     \"items\": {\r",
									"//         \"type\": \"boolean\"\r",
									"//     }\r",
									"// };\r",
									"\r",
									"// var data1 = [true, false];\r",
									"// var data2 = [true, 123];\r",
									"\r",
									"// pm.test('Schema is valid', function () {\r",
									"//     pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
									"//     pm.expect(tv4.validate(data2, schema)).to.be.true;\r",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"city\", data.city);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_district_test",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_district_test"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "amap_district_appid",
			"item": [
				{
					"name": "amap_district_appid001",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.environment.get(\"city\");\r",
									"// console.log(pm.environment.get(\"city\"));\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"districts\");\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"city\"));\r",
									"    pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"Quary amap district response schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        // \"count\": {\"type\": \"number\"},  // 包含error_code,类型为number\r",
									"        \"districts\": {\"type\": \"array\", \r",
									"                      \"items\": [{\"type\": \"object\"}, \r",
									"                                {\"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},    //最好罗列下enmu的值city什么的\r",
									"                                                \"name\": {\"type\": \"string\", \"pattern\": city}   //这个地方怎么和入参关联也要学习一下\r",
									"                                                }\r",
									"                                },\r",
									"                        ],\r",
									"                        \"additionalItems\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\"adcode\": {\"type\": \"string\", \"maxLength\": 6},\r",
									"                                                \"center\": {\"type\": \"string\", \"maxLength\": 21, \"pattern\": \"^[0-9]{3}.[0-9]{4,6},[0-9]{2}.[0-9]{4,6}$\"}, \r",
									"                                                \"citycode\": {\"type\": \"string\", \"maxLength\": 4},\r",
									"                                                \"districts\": {\"type\": \"array\"},\r",
									"                                                \"level\": {\"type\": \"string\", \"enum\": [\"district\", \"city\", \"province\"]},\r",
									"                                                \"name\": {\"type\": \"string\",\"pattern\": city}   //和入参关联\r",
									"                                                }                               \r",
									"                        },                         \r",
									"                       \"minItems\": 1,\r",
									"                    //    \"maxItems\": 2\r",
									"                       },\r",
									"        \"info\": {\"type\": \"string\"},\r",
									"        \"infocode\": {\"type\":\"string\", \r",
									"                     \"maxLength\": 5},\r",
									"        \"status\": {\"type\": \"string\"},\r",
									"        \"suggestion\": {\"type\": \"object\"},\r",
									"    },\r",
									"    \"require\": [\"count\", \"districts\", \"info\", \"infocode\", \"status\"] // 结构中必须包含error_code和data   \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"// pm.test('Schema is valid', function() {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"// });\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.info).to.eql(\"OK\");\r",
									"    pm.expect(jsonData.status).to.eql(\"1\");\r",
									"    // pm.expect(jsonData.districts[0].name).to.eql(city);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"三亚\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_district?appID=001",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_district"
							],
							"query": [
								{
									"key": "appID",
									"value": "001"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_district_appid003",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"三亚\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_district?appID=003",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_district"
							],
							"query": [
								{
									"key": "appID",
									"value": "003"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "amap_weather",
			"item": [
				{
					"name": "amap_weather_深圳",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.environment.get(\"city\");\r",
									"// console.log(pm.environment.get(\"city\"));\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"weather\");\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"city\"));\r",
									"    // pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.info).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.infocode).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives).to.be.a(\"array\");\r",
									"    pm.expect(jsonData.lives[0].adcode).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].city).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].humidity).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].province).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].reporttime).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].temperature).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].weather).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].winddirection).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].windpower).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.status).to.be.a(\"string\"); \r",
									"\r",
									"    pm.expect(jsonData.lives[0].adcode).to.eql(city);\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"Quary amap district response schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"count\": {\"type\": \"string\"},  // 包含error_code,类型为number\r",
									"        \"info\": {\"type\": \"string\", \"enum\": [\"OK\", \"city\"]},\r",
									"        \"infocode\": {\"type\": \"string\", \"minLength\": 5, \"maxLength\": 5},\r",
									"        \"lives\": {\"type\": \"array\", \r",
									"                      \"items\": [{\"type\": \"object\"}, \r",
									"                                {\"properties\": {\"adcode\": {\"type\": \"string\", \"minLength\": 6, \"maxLength\": 6},\r",
									"                                                \"city\": {\"type\": \"string\"}, \r",
									"                                                \"humidity\": {\"type\": \"string\", \"maxLength\": 2, \"pattern\": \"^[0-9]{2}$\"}, \r",
									"                                                \"province\": {\"type\": \"string\"},\r",
									"                                                \"reporttime\": {\"type\": \"string\"},\r",
									"                                                \"temperature\": {\"type\": \"string\"},\r",
									"                                                \"weather\": {\"type\": \"string\"},\r",
									"                                                \"winddirection\": {\"type\": \"string\"},\r",
									"                                                \"windpower\": {\"type\": \"string\"},\r",
									"                                                }\r",
									"                                },\r",
									"                        ]},\r",
									"        \"status\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 1},\r",
									"    },\r",
									"    \"require\": [\"count\", \"info\", \"infocode\", \"lives\", \"status\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.eql(\"1\");\r",
									"    pm.expect(jsonData.info).to.eql(\"OK\");\r",
									"    pm.expect(jsonData.infocode).to.eql(\"10000\");\r",
									"    pm.expect(jsonData.status).to.eql(\"1\");\r",
									"    // pm.expect(jsonData.districts[0].name).to.eql(city);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"440300\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_weather",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_weather"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_weather_上海",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.environment.get(\"city\");\r",
									"// console.log(pm.environment.get(\"city\"));\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"weather\");\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"city\"));\r",
									"    // pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.info).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.infocode).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives).to.be.a(\"array\");\r",
									"    pm.expect(jsonData.lives[0].adcode).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].city).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].humidity).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].province).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].reporttime).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].temperature).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].weather).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].winddirection).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].windpower).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.status).to.be.a(\"string\"); \r",
									"\r",
									"    pm.expect(jsonData.lives[0].adcode).to.eql(city);\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"Quary amap district response schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"count\": {\"type\": \"string\"},  // 包含error_code,类型为number\r",
									"        \"info\": {\"type\": \"string\", \"enum\": [\"OK\", \"city\"]},\r",
									"        \"infocode\": {\"type\": \"string\", \"minLength\": 5, \"maxLength\": 5},\r",
									"        \"lives\": {\"type\": \"array\", \r",
									"                      \"items\": [{\"type\": \"object\"}, \r",
									"                                {\"properties\": {\"adcode\": {\"type\": \"string\", \"minLength\": 6, \"maxLength\": 6},\r",
									"                                                \"city\": {\"type\": \"string\"}, \r",
									"                                                \"humidity\": {\"type\": \"string\", \"maxLength\": 2, \"pattern\": \"^[0-9]{2}$\"}, \r",
									"                                                \"province\": {\"type\": \"string\"},\r",
									"                                                \"reporttime\": {\"type\": \"string\"},\r",
									"                                                \"temperature\": {\"type\": \"string\"},\r",
									"                                                \"weather\": {\"type\": \"string\"},\r",
									"                                                \"winddirection\": {\"type\": \"string\"},\r",
									"                                                \"windpower\": {\"type\": \"string\"},\r",
									"                                                }\r",
									"                                },\r",
									"                        ]},\r",
									"        \"status\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 1},\r",
									"    },\r",
									"    \"require\": [\"count\", \"info\", \"infocode\", \"lives\", \"status\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.eql(\"1\");\r",
									"    pm.expect(jsonData.info).to.eql(\"OK\");\r",
									"    pm.expect(jsonData.infocode).to.eql(\"10000\");\r",
									"    pm.expect(jsonData.status).to.eql(\"1\");\r",
									"    // pm.expect(jsonData.districts[0].name).to.eql(city);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"310100\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_weather",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_weather"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_weather_山西",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.environment.get(\"city\");\r",
									"// console.log(pm.environment.get(\"city\"));\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"weather\");\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"city\"));\r",
									"    // pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.info).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.infocode).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives).to.be.a(\"array\");\r",
									"    pm.expect(jsonData.lives[0].adcode).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].city).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].humidity).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].province).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].reporttime).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].temperature).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].weather).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].winddirection).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].windpower).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.status).to.be.a(\"string\"); \r",
									"\r",
									"    pm.expect(jsonData.lives[0].adcode).to.eql(city);\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"Quary amap district response schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"count\": {\"type\": \"string\"},  // 包含error_code,类型为number\r",
									"        \"info\": {\"type\": \"string\", \"enum\": [\"OK\", \"city\"]},\r",
									"        \"infocode\": {\"type\": \"string\", \"minLength\": 5, \"maxLength\": 5},\r",
									"        \"lives\": {\"type\": \"array\", \r",
									"                      \"items\": [{\"type\": \"object\"}, \r",
									"                                {\"properties\": {\"adcode\": {\"type\": \"string\", \"minLength\": 6, \"maxLength\": 6},\r",
									"                                                \"city\": {\"type\": \"string\"}, \r",
									"                                                \"humidity\": {\"type\": \"string\", \"maxLength\": 2, \"pattern\": \"^[0-9]{2}$\"}, \r",
									"                                                \"province\": {\"type\": \"string\"},\r",
									"                                                \"reporttime\": {\"type\": \"string\"},\r",
									"                                                \"temperature\": {\"type\": \"string\"},\r",
									"                                                \"weather\": {\"type\": \"string\"},\r",
									"                                                \"winddirection\": {\"type\": \"string\"},\r",
									"                                                \"windpower\": {\"type\": \"string\"},\r",
									"                                                }\r",
									"                                },\r",
									"                        ]},\r",
									"        \"status\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 1},\r",
									"    },\r",
									"    \"require\": [\"count\", \"info\", \"infocode\", \"lives\", \"status\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.eql(\"1\");\r",
									"    pm.expect(jsonData.info).to.eql(\"OK\");\r",
									"    pm.expect(jsonData.infocode).to.eql(\"10000\");\r",
									"    pm.expect(jsonData.status).to.eql(\"1\");\r",
									"    // pm.expect(jsonData.districts[0].name).to.eql(city);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"140000\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_weather",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_weather"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_weather_太原",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.environment.get(\"city\");\r",
									"// console.log(pm.environment.get(\"city\"));\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"weather\");\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"city\"));\r",
									"    // pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.info).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.infocode).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives).to.be.a(\"array\");\r",
									"    pm.expect(jsonData.lives[0].adcode).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].city).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].humidity).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].province).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].reporttime).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].temperature).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].weather).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].winddirection).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].windpower).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.status).to.be.a(\"string\"); \r",
									"\r",
									"    pm.expect(jsonData.lives[0].adcode).to.eql(city);\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"Quary amap district response schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"count\": {\"type\": \"string\"},  // 包含error_code,类型为number\r",
									"        \"info\": {\"type\": \"string\", \"enum\": [\"OK\", \"city\"]},\r",
									"        \"infocode\": {\"type\": \"string\", \"minLength\": 5, \"maxLength\": 5},\r",
									"        \"lives\": {\"type\": \"array\", \r",
									"                      \"items\": [{\"type\": \"object\"}, \r",
									"                                {\"properties\": {\"adcode\": {\"type\": \"string\", \"minLength\": 6, \"maxLength\": 6},\r",
									"                                                \"city\": {\"type\": \"string\"}, \r",
									"                                                \"humidity\": {\"type\": \"string\", \"maxLength\": 2, \"pattern\": \"^[0-9]{2}$\"}, \r",
									"                                                \"province\": {\"type\": \"string\"},\r",
									"                                                \"reporttime\": {\"type\": \"string\"},\r",
									"                                                \"temperature\": {\"type\": \"string\"},\r",
									"                                                \"weather\": {\"type\": \"string\"},\r",
									"                                                \"winddirection\": {\"type\": \"string\"},\r",
									"                                                \"windpower\": {\"type\": \"string\"},\r",
									"                                                }\r",
									"                                },\r",
									"                        ]},\r",
									"        \"status\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 1},\r",
									"    },\r",
									"    \"require\": [\"count\", \"info\", \"infocode\", \"lives\", \"status\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.eql(\"1\");\r",
									"    pm.expect(jsonData.info).to.eql(\"OK\");\r",
									"    pm.expect(jsonData.infocode).to.eql(\"10000\");\r",
									"    pm.expect(jsonData.status).to.eql(\"1\");\r",
									"    // pm.expect(jsonData.districts[0].name).to.eql(city);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"140100\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_weather",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_weather"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_weather_123",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.environment.get(\"city\");\r",
									"// console.log(pm.environment.get(\"city\"));\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"// pm.test(\"Body matches string\", function () {\r",
									"//     // pm.expect(pm.response.text()).to.include(\"weather\");\r",
									"//     pm.expect(pm.response.text()).to.include(pm.environment.get(\"city\"));\r",
									"//     // pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"// });\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.info).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.infocode).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives).to.be.a(\"array\");\r",
									" \r",
									"    pm.expect(jsonData.status).to.be.a(\"string\"); \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.eql(\"1\");\r",
									"    pm.expect(jsonData.info).to.eql(\"OK\");\r",
									"    pm.expect(jsonData.infocode).to.eql(\"10000\");\r",
									"    pm.expect(jsonData.status).to.eql(\"1\");\r",
									"    // pm.expect(jsonData.districts[0].name).to.eql(city);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"123\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_weather",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_weather"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "amap_weather_v1",
			"item": [
				{
					"name": "amap_weather_v1_深圳",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.environment.get(\"city\");\r",
									"// console.log(pm.environment.get(\"city\"));\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"weather\");\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"city\"));\r",
									"    // pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.info).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.infocode).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives).to.be.a(\"array\");\r",
									"    pm.expect(jsonData.lives[0].adcode).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].city).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].humidity).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].province).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].reporttime).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].temperature).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].weather).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].winddirection).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].windpower).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.status).to.be.a(\"string\"); \r",
									"\r",
									"    pm.expect(jsonData.lives[0].adcode).to.eql(city);\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"Quary amap district response schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"count\": {\"type\": \"string\"},  // 包含error_code,类型为number\r",
									"        \"info\": {\"type\": \"string\", \"enum\": [\"OK\", \"city\"]},\r",
									"        \"infocode\": {\"type\": \"string\", \"minLength\": 5, \"maxLength\": 5},\r",
									"        \"lives\": {\"type\": \"array\", \r",
									"                      \"items\": [{\"type\": \"object\"}, \r",
									"                                {\"properties\": {\"adcode\": {\"type\": \"string\", \"minLength\": 6, \"maxLength\": 6},\r",
									"                                                \"city\": {\"type\": \"string\"}, \r",
									"                                                \"humidity\": {\"type\": \"string\", \"maxLength\": 2, \"pattern\": \"^[0-9]{2}$\"}, \r",
									"                                                \"province\": {\"type\": \"string\"},\r",
									"                                                \"reporttime\": {\"type\": \"string\"},\r",
									"                                                \"temperature\": {\"type\": \"string\"},\r",
									"                                                \"weather\": {\"type\": \"string\"},\r",
									"                                                \"winddirection\": {\"type\": \"string\"},\r",
									"                                                \"windpower\": {\"type\": \"string\"},\r",
									"                                                }\r",
									"                                },\r",
									"                        ]},\r",
									"        \"status\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 1},\r",
									"    },\r",
									"    \"require\": [\"count\", \"info\", \"infocode\", \"lives\", \"status\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.eql(\"1\");\r",
									"    pm.expect(jsonData.info).to.eql(\"OK\");\r",
									"    pm.expect(jsonData.infocode).to.eql(\"10000\");\r",
									"    pm.expect(jsonData.status).to.eql(\"1\");\r",
									"    // pm.expect(jsonData.districts[0].name).to.eql(city);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"440300\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_weather/v1",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_weather",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_weather_v1_上海",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.environment.get(\"city\");\r",
									"// console.log(pm.environment.get(\"city\"));\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"weather\");\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"city\"));\r",
									"    // pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.info).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.infocode).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives).to.be.a(\"array\");\r",
									"    pm.expect(jsonData.lives[0].adcode).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].city).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].humidity).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].province).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].reporttime).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].temperature).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].weather).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].winddirection).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].windpower).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.status).to.be.a(\"string\"); \r",
									"\r",
									"    pm.expect(jsonData.lives[0].adcode).to.eql(city);\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"Quary amap district response schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"count\": {\"type\": \"string\"},  // 包含error_code,类型为number\r",
									"        \"info\": {\"type\": \"string\", \"enum\": [\"OK\", \"city\"]},\r",
									"        \"infocode\": {\"type\": \"string\", \"minLength\": 5, \"maxLength\": 5},\r",
									"        \"lives\": {\"type\": \"array\", \r",
									"                      \"items\": [{\"type\": \"object\"}, \r",
									"                                {\"properties\": {\"adcode\": {\"type\": \"string\", \"minLength\": 6, \"maxLength\": 6},\r",
									"                                                \"city\": {\"type\": \"string\"}, \r",
									"                                                \"humidity\": {\"type\": \"string\", \"maxLength\": 2, \"pattern\": \"^[0-9]{2}$\"}, \r",
									"                                                \"province\": {\"type\": \"string\"},\r",
									"                                                \"reporttime\": {\"type\": \"string\"},\r",
									"                                                \"temperature\": {\"type\": \"string\"},\r",
									"                                                \"weather\": {\"type\": \"string\"},\r",
									"                                                \"winddirection\": {\"type\": \"string\"},\r",
									"                                                \"windpower\": {\"type\": \"string\"},\r",
									"                                                }\r",
									"                                },\r",
									"                        ]},\r",
									"        \"status\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 1},\r",
									"    },\r",
									"    \"require\": [\"count\", \"info\", \"infocode\", \"lives\", \"status\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.eql(\"1\");\r",
									"    pm.expect(jsonData.info).to.eql(\"OK\");\r",
									"    pm.expect(jsonData.infocode).to.eql(\"10000\");\r",
									"    pm.expect(jsonData.status).to.eql(\"1\");\r",
									"    // pm.expect(jsonData.districts[0].name).to.eql(city);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"310100\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_weather/v1",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_weather",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_weather_v1_山西",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.environment.get(\"city\");\r",
									"// console.log(pm.environment.get(\"city\"));\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"weather\");\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"city\"));\r",
									"    // pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.info).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.infocode).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives).to.be.a(\"array\");\r",
									"    pm.expect(jsonData.lives[0].adcode).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].city).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].humidity).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].province).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].reporttime).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].temperature).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].weather).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].winddirection).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].windpower).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.status).to.be.a(\"string\"); \r",
									"\r",
									"    pm.expect(jsonData.lives[0].adcode).to.eql(city);\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"Quary amap district response schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"count\": {\"type\": \"string\"},  // 包含error_code,类型为number\r",
									"        \"info\": {\"type\": \"string\", \"enum\": [\"OK\", \"city\"]},\r",
									"        \"infocode\": {\"type\": \"string\", \"minLength\": 5, \"maxLength\": 5},\r",
									"        \"lives\": {\"type\": \"array\", \r",
									"                      \"items\": [{\"type\": \"object\"}, \r",
									"                                {\"properties\": {\"adcode\": {\"type\": \"string\", \"minLength\": 6, \"maxLength\": 6},\r",
									"                                                \"city\": {\"type\": \"string\"}, \r",
									"                                                \"humidity\": {\"type\": \"string\", \"maxLength\": 2, \"pattern\": \"^[0-9]{2}$\"}, \r",
									"                                                \"province\": {\"type\": \"string\"},\r",
									"                                                \"reporttime\": {\"type\": \"string\"},\r",
									"                                                \"temperature\": {\"type\": \"string\"},\r",
									"                                                \"weather\": {\"type\": \"string\"},\r",
									"                                                \"winddirection\": {\"type\": \"string\"},\r",
									"                                                \"windpower\": {\"type\": \"string\"},\r",
									"                                                }\r",
									"                                },\r",
									"                        ]},\r",
									"        \"status\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 1},\r",
									"    },\r",
									"    \"require\": [\"count\", \"info\", \"infocode\", \"lives\", \"status\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.eql(\"1\");\r",
									"    pm.expect(jsonData.info).to.eql(\"OK\");\r",
									"    pm.expect(jsonData.infocode).to.eql(\"10000\");\r",
									"    pm.expect(jsonData.status).to.eql(\"1\");\r",
									"    // pm.expect(jsonData.districts[0].name).to.eql(city);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"140000\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_weather/v1",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_weather",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_weather_v1_太原",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.environment.get(\"city\");\r",
									"// console.log(pm.environment.get(\"city\"));\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"weather\");\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"city\"));\r",
									"    // pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.info).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.infocode).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives).to.be.a(\"array\");\r",
									"    pm.expect(jsonData.lives[0].adcode).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].city).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].humidity).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].province).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].reporttime).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives[0].temperature).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].weather).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].winddirection).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.lives[0].windpower).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.status).to.be.a(\"string\"); \r",
									"\r",
									"    pm.expect(jsonData.lives[0].adcode).to.eql(city);\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"Quary amap district response schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"count\": {\"type\": \"string\"},  // 包含error_code,类型为number\r",
									"        \"info\": {\"type\": \"string\", \"enum\": [\"OK\", \"city\"]},\r",
									"        \"infocode\": {\"type\": \"string\", \"minLength\": 5, \"maxLength\": 5},\r",
									"        \"lives\": {\"type\": \"array\", \r",
									"                      \"items\": [{\"type\": \"object\"}, \r",
									"                                {\"properties\": {\"adcode\": {\"type\": \"string\", \"minLength\": 6, \"maxLength\": 6},\r",
									"                                                \"city\": {\"type\": \"string\"}, \r",
									"                                                \"humidity\": {\"type\": \"string\", \"maxLength\": 2, \"pattern\": \"^[0-9]{2}$\"}, \r",
									"                                                \"province\": {\"type\": \"string\"},\r",
									"                                                \"reporttime\": {\"type\": \"string\"},\r",
									"                                                \"temperature\": {\"type\": \"string\"},\r",
									"                                                \"weather\": {\"type\": \"string\"},\r",
									"                                                \"winddirection\": {\"type\": \"string\"},\r",
									"                                                \"windpower\": {\"type\": \"string\"},\r",
									"                                                }\r",
									"                                },\r",
									"                        ]},\r",
									"        \"status\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 1},\r",
									"    },\r",
									"    \"require\": [\"count\", \"info\", \"infocode\", \"lives\", \"status\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.eql(\"1\");\r",
									"    pm.expect(jsonData.info).to.eql(\"OK\");\r",
									"    pm.expect(jsonData.infocode).to.eql(\"10000\");\r",
									"    pm.expect(jsonData.status).to.eql(\"1\");\r",
									"    // pm.expect(jsonData.districts[0].name).to.eql(city);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"140100\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_weather/v1",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_weather",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_weather_v1_123",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.environment.get(\"city\");\r",
									"// console.log(pm.environment.get(\"city\"));\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"// pm.test(\"Body matches string\", function () {\r",
									"//     // pm.expect(pm.response.text()).to.include(\"weather\");\r",
									"//     pm.expect(pm.response.text()).to.include(pm.environment.get(\"city\"));\r",
									"//     // pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"// });\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.info).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.infocode).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lives).to.be.a(\"array\");\r",
									" \r",
									"    pm.expect(jsonData.status).to.be.a(\"string\"); \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.eql(\"1\");\r",
									"    pm.expect(jsonData.info).to.eql(\"OK\");\r",
									"    pm.expect(jsonData.infocode).to.eql(\"10000\");\r",
									"    pm.expect(jsonData.status).to.eql(\"1\");\r",
									"    // pm.expect(jsonData.districts[0].name).to.eql(city);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"123\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/amap_weather/v1",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"amap_weather",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "kdxf_nlp_cws",
			"item": [
				{
					"name": "kdxf_nlp_cws_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"    pm.expect(pm.response.text()).to.include(\"word\");\r",
									"    // pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.desc).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.sid).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"科大讯飞 NLP 对输入内容进行分词 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"code\": {\"type\": \"string\"},  \r",
									"        \"data\": {\"type\": \"object\", \r",
									"                \"properties\": {\"word\": {\"type\": \"array\"}},\r",
									"        },\r",
									"        \"desc\": {\"type\": \"string\", \"minLength\": 7, \"maxLength\": 7},\r",
									"        \"sid\": {\"type\": \"string\"},\r",
									"},\r",
									"    \"require\": [\"code\", \"data\", \"desc\", \"sid\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(\"0\");\r",
									"    pm.expect(jsonData.desc).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"content\", \"北京的天气\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{content}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/kdxf_nlp_cws",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"kdxf_nlp_cws"
							]
						}
					},
					"response": []
				},
				{
					"name": "kdxf_nlp_cws_2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"content\", \"新东方双语带货股价暴涨，直播也开始卷了？\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"    pm.expect(pm.response.text()).to.include(\"word\");\r",
									"    // pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.desc).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.sid).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"科大讯飞 NLP 对输入内容进行分词 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"code\": {\"type\": \"string\"},  \r",
									"        \"data\": {\"type\": \"object\", \r",
									"                \"properties\": {\"word\": {\"type\": \"array\"}},\r",
									"        },\r",
									"        \"desc\": {\"type\": \"string\", \"minLength\": 7, \"maxLength\": 7},\r",
									"        \"sid\": {\"type\": \"string\"},\r",
									"},\r",
									"    \"require\": [\"code\", \"data\", \"desc\", \"sid\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(\"0\");\r",
									"    pm.expect(jsonData.desc).to.eql(\"success\");\r",
									"    // pm.expect(jsonData.districts[0].name).to.eql(city);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{content}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/kdxf_nlp_cws",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"kdxf_nlp_cws"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "kdxf_nlp_pos",
			"item": [
				{
					"name": "kdxf_nlp_pos_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"    pm.expect(pm.response.text()).to.include(\"pos\");\r",
									"    // pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.desc).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.sid).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"科大讯飞 NLP 对输入内容标注词性 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"code\": {\"type\": \"string\"},  \r",
									"        \"data\": {\"type\": \"object\", \r",
									"                \"properties\": {\"pos\": {\"type\": \"array\"}},\r",
									"        },\r",
									"        \"desc\": {\"type\": \"string\", \"minLength\": 7, \"maxLength\": 7},\r",
									"        \"sid\": {\"type\": \"string\"},\r",
									"},\r",
									"    \"require\": [\"code\", \"data\", \"desc\", \"sid\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(\"0\");\r",
									"    pm.expect(jsonData.desc).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"content\", \"北京的天气\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{content}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/kdxf_nlp_pos",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"kdxf_nlp_pos"
							]
						}
					},
					"response": []
				},
				{
					"name": "kdxf_nlp_pos_2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"content\", \"唐山打人事件最新进展，人渣背景曝光：暴行背后，站着的远不止9个人\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"    pm.expect(pm.response.text()).to.include(\"pos\");\r",
									"    // pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.desc).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.sid).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"科大讯飞 NLP 对输入内容标注词性 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"code\": {\"type\": \"string\"},  \r",
									"        \"data\": {\"type\": \"object\", \r",
									"                \"properties\": {\"pos\": {\"type\": \"array\"}},\r",
									"        },\r",
									"        \"desc\": {\"type\": \"string\", \"minLength\": 7, \"maxLength\": 7},\r",
									"        \"sid\": {\"type\": \"string\"},\r",
									"},\r",
									"    \"require\": [\"code\", \"data\", \"desc\", \"sid\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(\"0\");\r",
									"    pm.expect(jsonData.desc).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{content}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/kdxf_nlp_pos",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"kdxf_nlp_pos"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "kdxf_nlp_ke",
			"item": [
				{
					"name": "kdxf_nlp_ke_1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"content\", \"北京的天气\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"    pm.expect(pm.response.text()).to.include(\"ke\");\r",
									"    pm.expect(pm.response.text()).to.include(\"score\");\r",
									"    pm.expect(pm.response.text()).to.include(\"word\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.desc).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.sid).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"科大讯飞 NLP 对输入内容提取关键词 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"code\": {\"type\": \"string\"},  \r",
									"        \"data\": {\"type\": \"object\", \r",
									"                \"properties\": {\"ke\": {\"type\": \"array\",\r",
									"                               \"items\": [{\"type\": \"object\"}, \r",
									"                                        {\"properties\": {\"score\":{\"type\": \"string\"},\r",
									"                                                         \"word\":  {\"type\": \"string\"}\r",
									"                                                        }\r",
									"                                        }],\r",
									"                                \"additionalItems\": {\"type\": \"object\", \r",
									"                                        \"properties\": {\"score\":{\"type\": \"string\"},\r",
									"                                        \"word\":  {\"type\": \"string\"}}\r",
									"\t\t\t\t\t\t\t\t},\r",
									"                                },\r",
									"\t\t\t\t\t\t\t\t// \"minItems\": 1,\r",
									"\t\t\t\t\t\t\t\t}\r",
									"\t\t},\r",
									"        \"desc\": {\"type\": \"string\", \"minLength\": 7, \"maxLength\": 7},\r",
									"        \"sid\": {\"type\": \"string\"},\r",
									"},\r",
									"    \"require\": [\"code\", \"data\", \"desc\", \"sid\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(\"0\");\r",
									"    pm.expect(jsonData.desc).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{content}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/kdxf_nlp_ke",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"kdxf_nlp_ke"
							]
						}
					},
					"response": []
				},
				{
					"name": "kdxf_nlp_ke_2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"content\", \"曾经因为双减落地，裁员5万，股价暴跌90%，市值蒸发2000亿，30年心血归零的新东方，俞敏洪凭什么逆风翻盘，破局成功？这背后的新商业逻辑是什么？\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"    pm.expect(pm.response.text()).to.include(\"ke\");\r",
									"    pm.expect(pm.response.text()).to.include(\"score\");\r",
									"    pm.expect(pm.response.text()).to.include(\"word\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.desc).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.sid).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"科大讯飞 NLP 对输入内容提取关键词 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"code\": {\"type\": \"string\"},  \r",
									"        \"data\": {\"type\": \"object\", \r",
									"                \"properties\": {\"ke\": {\"type\": \"array\",\r",
									"                               \"items\": [{\"type\": \"object\"}, \r",
									"                                        {\"properties\": {\"score\":{\"type\": \"string\"},\r",
									"                                                         \"word\":  {\"type\": \"string\"}\r",
									"                                                        }\r",
									"                                        }],\r",
									"                                \"additionalItems\": {\"type\": \"object\", \r",
									"                                        \"properties\": {\"score\":{\"type\": \"string\"},\r",
									"                                        \"word\":  {\"type\": \"string\"}}\r",
									"\t\t\t\t\t\t\t\t},\r",
									"                                },\r",
									"\t\t\t\t\t\t\t\t// \"minItems\": 1,\r",
									"\t\t\t\t\t\t\t\t}\r",
									"\t\t},\r",
									"        \"desc\": {\"type\": \"string\", \"minLength\": 7, \"maxLength\": 7},\r",
									"        \"sid\": {\"type\": \"string\"},\r",
									"},\r",
									"    \"require\": [\"code\", \"data\", \"desc\", \"sid\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(\"0\");\r",
									"    pm.expect(jsonData.desc).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{content}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/kdxf_nlp_ke",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"kdxf_nlp_ke"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "qywx_gettoken",
			"item": [
				{
					"name": "qywx_gettoken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"access_token\");\r",
									"    pm.expect(pm.response.text()).to.include(\"errcode\");\r",
									"    pm.expect(pm.response.text()).to.include(\"errmsg\");\r",
									"    pm.expect(pm.response.text()).to.include(\"expires_in\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.access_token).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.errcode).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.errmsg).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.expires_in).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"Quary amap district response schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"access_token\": {\"type\": \"string\"},  // 包含error_code,类型为number\r",
									"        \"errcode\": {\"type\": \"number\"},\r",
									"        \"errmsg\": {\"type\": \"string\", \"enum\": [\"ok\"]},\r",
									"        \"expires_in\": {\"type\": \"number\"},\r",
									"    },\r",
									"    \"require\": [\"access_token\", \"errcode\", \"errmsg\", \"expires_in\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errcode).to.eql(0);\r",
									"    pm.expect(jsonData.errmsg).to.eql(\"ok\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{url}}/httpapi/qywx_gettoken",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"qywx_gettoken"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "baidu_image_classify_token",
			"item": [
				{
					"name": "baidu_image_classify_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"access_token\");\r",
									"    pm.expect(pm.response.text()).to.include(\"expires_in\");\r",
									"    pm.expect(pm.response.text()).to.include(\"refresh_token\");\r",
									"    pm.expect(pm.response.text()).to.include(\"scope\");\r",
									"    pm.expect(pm.response.text()).to.include(\"session_key\");\r",
									"    pm.expect(pm.response.text()).to.include(\"session_secret\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.access_token).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.expires_in).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.refresh_token).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.scope).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.session_key).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.session_secret).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"查询百度图片分类token schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"access_token\": {\"type\": \"string\"},\r",
									"        \"expires_in\": {\"type\": \"number\"},\r",
									"        \"refresh_token\": {\"type\": \"string\"},\r",
									"        \"scope\": {\"type\": \"string\"},\r",
									"        \"session_key\": {\"type\": \"string\"},\r",
									"        \"session_secret\": {\"type\": \"string\"},\r",
									"    },\r",
									"    \"require\": [\"access_token\", \"expires_in\", \"refresh_token\", \"scope\", \"session_key\", \"session_secret\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"// pm.test(\"Check response value\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.errcode).to.eql(0);\r",
									"//     pm.expect(jsonData.errmsg).to.eql(\"ok\");\r",
									"// });\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{url}}/httpapi/baidu_image_classify_token",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"baidu_image_classify_token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "yznl_nlp_motion",
			"item": [
				{
					"name": "yznl_nlp_motion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"access_token\");\r",
									"    pm.expect(pm.response.text()).to.include(\"expires_in\");\r",
									"    pm.expect(pm.response.text()).to.include(\"refresh_token\");\r",
									"    pm.expect(pm.response.text()).to.include(\"scope\");\r",
									"    pm.expect(pm.response.text()).to.include(\"session_key\");\r",
									"    pm.expect(pm.response.text()).to.include(\"session_secret\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.access_token).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.expires_in).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.refresh_token).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.scope).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.session_key).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.session_secret).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"查询百度图片分类token schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"access_token\": {\"type\": \"string\"},\r",
									"        \"expires_in\": {\"type\": \"number\"},\r",
									"        \"refresh_token\": {\"type\": \"string\"},\r",
									"        \"scope\": {\"type\": \"string\"},\r",
									"        \"session_key\": {\"type\": \"string\"},\r",
									"        \"session_secret\": {\"type\": \"string\"},\r",
									"    },\r",
									"    \"require\": [\"access_token\", \"expires_in\", \"refresh_token\", \"scope\", \"session_key\", \"session_secret\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"// pm.test(\"Check response value\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.errcode).to.eql(0);\r",
									"//     pm.expect(jsonData.errmsg).to.eql(\"ok\");\r",
									"// });\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"city\", \"hello\");\r",
									"pm.environment.set(\"seqid\", \"c75749a4f-4622-989c-455f9bd20640\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"{{text}}\",\r\n    \"seqid\": \"{{seqid}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/httpapi/yznl_nlp_motion",
							"host": [
								"{{url}}"
							],
							"path": [
								"httpapi",
								"yznl_nlp_motion"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "amap_city_weather",
			"item": [
				{
					"name": "amap_city_weather_base_北京",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"北京\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/amap_city_weather_base",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"amap_city_weather_base"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_city_weather_北京",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"weather\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.humidity).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.region).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.temperature).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.weather).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.winddirection).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.windpower).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.errCode).to.be.a(\"string\"); \r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"通过编排实现直接指定城市名称获得天气数据Json格式 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"data\": {\"type\": \"object\",\r",
									"                \"properties\": {\"humidity\": {\"type\": \"string\", \"minLength\": 2, \"maxLength\": 2},\r",
									"                               \"region\": {\"type\": \"string\", \"minLength\": 2, \"maxLength\": 4},\r",
									"                               \"temperature\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 3},\r",
									"                               \"weather\": {\"type\": \"string\"},\r",
									"                               \"winddirection\": {\"type\": \"string\"},\r",
									"                               \"windpower\": {\"type\": \"string\"},\r",
									"                }}, \r",
									"        \"errCode\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 1},\r",
									"    },\r",
									"    \"require\": [\"data\", \"errCode\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errCode).to.eql(\"1\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"北京\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/amap_city_weather",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"amap_city_weather"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_city_weather_上海",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"weather\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.humidity).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.region).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.temperature).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.weather).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.winddirection).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.windpower).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.errCode).to.be.a(\"string\"); \r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"通过编排实现直接指定城市名称获得天气数据Json格式 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"data\": {\"type\": \"object\",\r",
									"                \"properties\": {\"humidity\": {\"type\": \"string\", \"minLength\": 2, \"maxLength\": 2},\r",
									"                               \"region\": {\"type\": \"string\", \"minLength\": 2, \"maxLength\": 4},\r",
									"                               \"temperature\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 3},\r",
									"                               \"weather\": {\"type\": \"string\"},\r",
									"                               \"winddirection\": {\"type\": \"string\"},\r",
									"                               \"windpower\": {\"type\": \"string\"},\r",
									"                }}, \r",
									"        \"errCode\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 1},\r",
									"    },\r",
									"    \"require\": [\"data\", \"errCode\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errCode).to.eql(\"1\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"上海\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/amap_city_weather",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"amap_city_weather"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_city_weather_云南",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"weather\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.humidity).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.region).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.temperature).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.weather).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.winddirection).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.windpower).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.errCode).to.be.a(\"string\"); \r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"通过编排实现直接指定城市名称获得天气数据Json格式 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"data\": {\"type\": \"object\",\r",
									"                \"properties\": {\"humidity\": {\"type\": \"string\", \"minLength\": 2, \"maxLength\": 2},\r",
									"                               \"region\": {\"type\": \"string\", \"minLength\": 2, \"maxLength\": 4},\r",
									"                               \"temperature\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 3},\r",
									"                               \"weather\": {\"type\": \"string\"},\r",
									"                               \"winddirection\": {\"type\": \"string\"},\r",
									"                               \"windpower\": {\"type\": \"string\"},\r",
									"                }}, \r",
									"        \"errCode\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 1},\r",
									"    },\r",
									"    \"require\": [\"data\", \"errCode\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errCode).to.eql(\"1\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"云南\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/amap_city_weather",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"amap_city_weather"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_city_weather_乌鲁木齐",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"weather\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.humidity).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.region).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.temperature).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.weather).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.winddirection).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.windpower).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.errCode).to.be.a(\"string\"); \r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"通过编排实现直接指定城市名称获得天气数据Json格式 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"data\": {\"type\": \"object\",\r",
									"                \"properties\": {\"humidity\": {\"type\": \"string\", \"minLength\": 2, \"maxLength\": 2},\r",
									"                               \"region\": {\"type\": \"string\", \"minLength\": 2, \"maxLength\": 4},\r",
									"                               \"temperature\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 3},\r",
									"                               \"weather\": {\"type\": \"string\"},\r",
									"                               \"winddirection\": {\"type\": \"string\"},\r",
									"                               \"windpower\": {\"type\": \"string\"},\r",
									"                }}, \r",
									"        \"errCode\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 1},\r",
									"    },\r",
									"    \"require\": [\"data\", \"errCode\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errCode).to.eql(\"1\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"乌鲁木齐\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/amap_city_weather",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"amap_city_weather"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_city_weather_abc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 500\", function(){\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"abc\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/amap_city_weather",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"amap_city_weather"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "amap_city_weather_v1",
			"item": [
				{
					"name": "amap_city_weather_v1_北京",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"weather\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.humidity).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.region).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.temperature).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.weather).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.winddirection).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.windpower).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.errCode).to.be.a(\"string\"); \r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"通过编排实现直接指定城市名称获得天气数据Json格式 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"data\": {\"type\": \"object\",\r",
									"                \"properties\": {\"humidity\": {\"type\": \"string\", \"minLength\": 2, \"maxLength\": 2},\r",
									"                               \"region\": {\"type\": \"string\", \"minLength\": 2, \"maxLength\": 4},\r",
									"                               \"temperature\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 3},\r",
									"                               \"weather\": {\"type\": \"string\"},\r",
									"                               \"winddirection\": {\"type\": \"string\"},\r",
									"                               \"windpower\": {\"type\": \"string\"},\r",
									"                }}, \r",
									"        \"errCode\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 1},\r",
									"    },\r",
									"    \"require\": [\"data\", \"errCode\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errCode).to.eql(\"1\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"北京\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/amap_city_weather/v1",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"amap_city_weather",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_city_weather_v1_上海",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"weather\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.humidity).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.region).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.temperature).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.weather).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.winddirection).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.windpower).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.errCode).to.be.a(\"string\"); \r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"通过编排实现直接指定城市名称获得天气数据Json格式 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"data\": {\"type\": \"object\",\r",
									"                \"properties\": {\"humidity\": {\"type\": \"string\", \"minLength\": 2, \"maxLength\": 2},\r",
									"                               \"region\": {\"type\": \"string\", \"minLength\": 2, \"maxLength\": 4},\r",
									"                               \"temperature\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 3},\r",
									"                               \"weather\": {\"type\": \"string\"},\r",
									"                               \"winddirection\": {\"type\": \"string\"},\r",
									"                               \"windpower\": {\"type\": \"string\"},\r",
									"                }}, \r",
									"        \"errCode\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 1},\r",
									"    },\r",
									"    \"require\": [\"data\", \"errCode\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errCode).to.eql(\"1\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"上海\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/amap_city_weather/v1",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"amap_city_weather",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_city_weather_v1_云南",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"weather\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.humidity).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.region).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.temperature).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.weather).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.winddirection).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.windpower).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.errCode).to.be.a(\"string\"); \r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"通过编排实现直接指定城市名称获得天气数据Json格式 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"data\": {\"type\": \"object\",\r",
									"                \"properties\": {\"humidity\": {\"type\": \"string\", \"minLength\": 2, \"maxLength\": 2},\r",
									"                               \"region\": {\"type\": \"string\", \"minLength\": 2, \"maxLength\": 4},\r",
									"                               \"temperature\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 3},\r",
									"                               \"weather\": {\"type\": \"string\"},\r",
									"                               \"winddirection\": {\"type\": \"string\"},\r",
									"                               \"windpower\": {\"type\": \"string\"},\r",
									"                }}, \r",
									"        \"errCode\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 1},\r",
									"    },\r",
									"    \"require\": [\"data\", \"errCode\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errCode).to.eql(\"1\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"云南\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/amap_city_weather/v1",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"amap_city_weather",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_city_weather_v1_乌鲁木齐",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"weather\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.humidity).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.region).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.temperature).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.weather).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.winddirection).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.data.windpower).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.errCode).to.be.a(\"string\"); \r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"通过编排实现直接指定城市名称获得天气数据Json格式 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"data\": {\"type\": \"object\",\r",
									"                \"properties\": {\"humidity\": {\"type\": \"string\", \"minLength\": 2, \"maxLength\": 2},\r",
									"                               \"region\": {\"type\": \"string\", \"minLength\": 2, \"maxLength\": 4},\r",
									"                               \"temperature\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 3},\r",
									"                               \"weather\": {\"type\": \"string\"},\r",
									"                               \"winddirection\": {\"type\": \"string\"},\r",
									"                               \"windpower\": {\"type\": \"string\"},\r",
									"                }}, \r",
									"        \"errCode\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 1},\r",
									"    },\r",
									"    \"require\": [\"data\", \"errCode\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errCode).to.eql(\"1\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"乌鲁木齐\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/amap_city_weather/v1",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"amap_city_weather",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_city_weather_v1_abc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 500\", function(){\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"abc\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/amap_city_weather/v1",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"amap_city_weather",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "amap_city_weather_html",
			"item": [
				{
					"name": "amap_city_weather_html_北京",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"weather\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check the tile of response\", function () {\r",
									"    var html = cheerio.load(pm.response.text());\r",
									"    var title = html('title').text();\r",
									"    console.log(title);\r",
									"    pm.expect(title).to.eql('Hello API');\r",
									"});\r",
									"\r",
									"pm.test(\"Check the tile and key data of response\", function () {\r",
									"    var html = cheerio(responseBody);\r",
									"    var title = html.find('title').text();\r",
									"    console.log(title);\r",
									"    var body = html.find('body').text();\r",
									"    console.log(body);  \r",
									"    pm.expect(title).to.eql('Hello API');\r",
									"    pm.expect(html.text()).to.include(\"status\");\r",
									"    pm.expect(html.text()).to.include(\"region\");\r",
									"    pm.expect(html.text()).to.include(\"weather\");\r",
									"    pm.expect(html.text()).to.include(\"temperature\");\r",
									"    pm.expect(html.text()).to.include(\"winddirection\");\r",
									"    pm.expect(html.text()).to.include(\"windpower\");\r",
									"    pm.expect(html.text()).to.include(\"humidity\");\r",
									"    pm.expect(html.text()).to.include(pm.environment.get(\"city\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    // pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is text/html\",function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html; charset=utf-8');\r",
									"});\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"北京\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/amap_city_weather_html",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"amap_city_weather_html"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_city_weather_html_上海",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"weather\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check the tile of response\", function () {\r",
									"    var html = cheerio.load(pm.response.text());\r",
									"    var title = html('title').text();\r",
									"    console.log(title);\r",
									"    pm.expect(title).to.eql('Hello API');\r",
									"});\r",
									"\r",
									"pm.test(\"Check the tile and key data of response\", function () {\r",
									"    var html = cheerio(responseBody);\r",
									"    var title = html.find('title').text();\r",
									"    console.log(title);\r",
									"    var body = html.find('body').text();\r",
									"    console.log(body);  \r",
									"    pm.expect(title).to.eql('Hello API');\r",
									"    pm.expect(html.text()).to.include(\"status\");\r",
									"    pm.expect(html.text()).to.include(\"region\");\r",
									"    pm.expect(html.text()).to.include(\"weather\");\r",
									"    pm.expect(html.text()).to.include(\"temperature\");\r",
									"    pm.expect(html.text()).to.include(\"winddirection\");\r",
									"    pm.expect(html.text()).to.include(\"windpower\");\r",
									"    pm.expect(html.text()).to.include(\"humidity\");\r",
									"    pm.expect(html.text()).to.include(pm.environment.get(\"city\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    // pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is text/html\",function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html; charset=utf-8');\r",
									"});\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"上海\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/amap_city_weather_html",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"amap_city_weather_html"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_city_weather_html_云南",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"weather\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check the tile of response\", function () {\r",
									"    var html = cheerio.load(pm.response.text());\r",
									"    var title = html('title').text();\r",
									"    console.log(title);\r",
									"    pm.expect(title).to.eql('Hello API');\r",
									"});\r",
									"\r",
									"pm.test(\"Check the tile and key data of response\", function () {\r",
									"    var html = cheerio(responseBody);\r",
									"    var title = html.find('title').text();\r",
									"    console.log(title);\r",
									"    var body = html.find('body').text();\r",
									"    console.log(body);  \r",
									"    pm.expect(title).to.eql('Hello API');\r",
									"    pm.expect(html.text()).to.include(\"status\");\r",
									"    pm.expect(html.text()).to.include(\"region\");\r",
									"    pm.expect(html.text()).to.include(\"weather\");\r",
									"    pm.expect(html.text()).to.include(\"temperature\");\r",
									"    pm.expect(html.text()).to.include(\"winddirection\");\r",
									"    pm.expect(html.text()).to.include(\"windpower\");\r",
									"    pm.expect(html.text()).to.include(\"humidity\");\r",
									"    pm.expect(html.text()).to.include(pm.environment.get(\"city\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    // pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is text/html\",function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html; charset=utf-8');\r",
									"});\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"云南\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/amap_city_weather_html",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"amap_city_weather_html"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_city_weather_html_乌鲁木齐",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"weather\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check the tile of response\", function () {\r",
									"    var html = cheerio.load(pm.response.text());\r",
									"    var title = html('title').text();\r",
									"    console.log(title);\r",
									"    pm.expect(title).to.eql('Hello API');\r",
									"});\r",
									"\r",
									"pm.test(\"Check the tile and key data of response\", function () {\r",
									"    var html = cheerio(responseBody);\r",
									"    var title = html.find('title').text();\r",
									"    console.log(title);\r",
									"    var body = html.find('body').text();\r",
									"    console.log(body);  \r",
									"    pm.expect(title).to.eql('Hello API');\r",
									"    pm.expect(html.text()).to.include(\"status\");\r",
									"    pm.expect(html.text()).to.include(\"region\");\r",
									"    pm.expect(html.text()).to.include(\"weather\");\r",
									"    pm.expect(html.text()).to.include(\"temperature\");\r",
									"    pm.expect(html.text()).to.include(\"winddirection\");\r",
									"    pm.expect(html.text()).to.include(\"windpower\");\r",
									"    pm.expect(html.text()).to.include(\"humidity\");\r",
									"    // pm.expect(html.text()).to.include(pm.environment.get(\"city\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    // pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is text/html\",function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html; charset=utf-8');\r",
									"});\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"乌鲁木齐\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/amap_city_weather_html",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"amap_city_weather_html"
							]
						}
					},
					"response": []
				},
				{
					"name": "amap_city_weather_html_123",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 500\", function(){\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"var city = pm.environment.get(\"city\");\r",
									"console.log(city);\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"city\", \"123\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/amap_city_weather_html",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"amap_city_weather_html"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "baidu_image_classify",
			"item": [
				{
					"name": "baidu_image_classify_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"result\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"score\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.log_id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.result).to.be.a(\"array\"); \r",
									"    pm.expect(jsonData.result[0].name).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.result[0].score).to.be.a(\"string\"); \r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"通过编排从百度获得相关图片分类 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"log_id\": {\"type\": \"number\"},\r",
									"        \"result\": {\"type\": \"array\", \r",
									"                   \"items\": [{\"type\": \"object\"}, \r",
									"                            {\"properties\": {\"name\": {\"type\": \"string\"},\r",
									"                                            \"score\": {\"type\": \"string\"}\r",
									"                                            }\r",
									"                            },\r",
									"                        ]},\r",
									"                    \"additionalItems\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\"name\": {\"type\": \"string\"},\r",
									"                                               \"score\": {\"type\": \"string\"}                              \r",
									"                        },\r",
									"                    }                      \r",
									"    },\r",
									"    \"require\": [\"log_id\", \"result\"]   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"content\", \"https://img.zcool.cn/community/01ff2059770a25a8012193a37c7695.jpg\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{content}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/baidu_image_classify",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"baidu_image_classify"
							]
						}
					},
					"response": []
				},
				{
					"name": "baidu_image_classify_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"result\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"score\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.log_id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.result).to.be.a(\"array\"); \r",
									"    pm.expect(jsonData.result[0].name).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.result[0].score).to.be.a(\"string\"); \r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"通过编排从百度获得相关图片分类 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"log_id\": {\"type\": \"number\"},\r",
									"        \"result\": {\"type\": \"array\", \r",
									"                   \"items\": [{\"type\": \"object\"}, \r",
									"                            {\"properties\": {\"name\": {\"type\": \"string\"},\r",
									"                                            \"score\": {\"type\": \"string\"}\r",
									"                                            }\r",
									"                            },\r",
									"                        ]},\r",
									"                    \"additionalItems\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\"name\": {\"type\": \"string\"},\r",
									"                                               \"score\": {\"type\": \"string\"}                              \r",
									"                        },\r",
									"                    }                      \r",
									"    },\r",
									"    \"require\": [\"log_id\", \"result\"]   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"content\", \"https://tenfei04.cfp.cn/creative/vcg/veer/1600water/veer-308648818.jpg\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{content}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/baidu_image_classify",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"baidu_image_classify"
							]
						}
					},
					"response": []
				},
				{
					"name": "baidu_image_classify_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"result\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"score\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.log_id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.result).to.be.a(\"array\"); \r",
									"    pm.expect(jsonData.result[0].name).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.result[0].score).to.be.a(\"string\"); \r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"通过编排从百度获得相关图片分类 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"log_id\": {\"type\": \"number\"},\r",
									"        \"result\": {\"type\": \"array\", \r",
									"                   \"items\": [{\"type\": \"object\"}, \r",
									"                            {\"properties\": {\"name\": {\"type\": \"string\"},\r",
									"                                            \"score\": {\"type\": \"string\"}\r",
									"                                            }\r",
									"                            },\r",
									"                        ]},\r",
									"                    \"additionalItems\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\"name\": {\"type\": \"string\"},\r",
									"                                               \"score\": {\"type\": \"string\"}                              \r",
									"                        },\r",
									"                    }                      \r",
									"    },\r",
									"    \"require\": [\"log_id\", \"result\"]   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"content\", \"https://alifei04.cfp.cn/creative/vcg/veer/1600water/veer-170015083.jpg\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{content}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/baidu_image_classify",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"baidu_image_classify"
							]
						}
					},
					"response": []
				},
				{
					"name": "baidu_image_classify_cartoon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"result\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"score\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.log_id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.result).to.be.a(\"array\"); \r",
									"    pm.expect(jsonData.result[0].name).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.result[0].score).to.be.a(\"string\"); \r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"通过编排从百度获得相关图片分类 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"log_id\": {\"type\": \"number\"},\r",
									"        \"result\": {\"type\": \"array\", \r",
									"                   \"items\": [{\"type\": \"object\"}, \r",
									"                            {\"properties\": {\"name\": {\"type\": \"string\"},\r",
									"                                            \"score\": {\"type\": \"string\"}\r",
									"                                            }\r",
									"                            },\r",
									"                        ]},\r",
									"                    \"additionalItems\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\"name\": {\"type\": \"string\"},\r",
									"                                               \"score\": {\"type\": \"string\"}                              \r",
									"                        },\r",
									"                    }                      \r",
									"    },\r",
									"    \"require\": [\"log_id\", \"result\"]   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result[0].name).to.eql(\"非动物\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"content\", \"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fku.90sjimg.com%2Felement_pic%2F17%2F09%2F12%2Fdcadc6717dc073e391754fc96c7a50a8.jpg&refer=http%3A%2F%2Fku.90sjimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1658384868&t=fdad649ad71a849a97899356f9129c0d\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{content}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/baidu_image_classify",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"baidu_image_classify"
							]
						}
					},
					"response": []
				},
				{
					"name": "baidu_image_classify_no_animal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"result\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"score\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.log_id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.result).to.be.a(\"array\"); \r",
									"    pm.expect(jsonData.result[0].name).to.be.a(\"string\"); \r",
									"    pm.expect(jsonData.result[0].score).to.be.a(\"string\"); \r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"通过编排从百度获得相关图片分类 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"log_id\": {\"type\": \"number\"},\r",
									"        \"result\": {\"type\": \"array\", \r",
									"                   \"items\": [{\"type\": \"object\"}, \r",
									"                            {\"properties\": {\"name\": {\"type\": \"string\"},\r",
									"                                            \"score\": {\"type\": \"string\"}\r",
									"                                            }\r",
									"                            },\r",
									"                        ]},\r",
									"                    \"additionalItems\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\"name\": {\"type\": \"string\"},\r",
									"                                               \"score\": {\"type\": \"string\"}                              \r",
									"                        },\r",
									"                    }                      \r",
									"    },\r",
									"    \"require\": [\"log_id\", \"result\"]   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result[0].name).to.eql(\"非动物\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"content\", \"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fnimg.ws.126.net%2F%3Furl%3Dhttp%253A%252F%252Fdingyue.ws.126.net%252F2022%252F0102%252F323cb551j00r51s6v0037d200k000k0g00k000k0.jpg%26thumbnail%3D650x2147483647%26quality%3D80%26type%3Djpg&refer=http%3A%2F%2Fnimg.ws.126.net&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1658372260&t=7ca025c94e99cf83e131f4e43182796d\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{content}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/baidu_image_classify",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"baidu_image_classify"
							]
						}
					},
					"response": []
				},
				{
					"name": "baidu_image_classify_not_picture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"error_code\");\r",
									"    pm.expect(pm.response.text()).to.include(\"error_msg\");\r",
									"    pm.expect(pm.response.text()).to.include(\"log_id\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error_code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.error_msg).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.log_id).to.be.a(\"number\"); \r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"通过编排从百度获得相关图片分类 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"error_code\": {\"type\": \"number\"},\r",
									"        \"error_msg\": {\"type\": \"string\"},\r",
									"        \"log_id\": {\"type\": \"number\"},\r",
									"    },\r",
									"    \"require\": [\"log_id\", \"result\"]   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error_msg).to.eql(\"url format illegal\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"content\", \"https://www.163.com/dy/article/H6H7HL0N0552IAMY.html\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{content}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/baidu_image_classify",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"baidu_image_classify"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "kdxf_nlp",
			"item": [
				{
					"name": "kdxf_nlp_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"    pm.expect(pm.response.text()).to.include(\"pos\");\r",
									"    pm.expect(pm.response.text()).to.include(\"word\")\r",
									"    // pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.be.an(\"object\"); \r",
									"    pm.expect(jsonData.data.pos).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.data.word).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errCode).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"科大讯飞 组合文本处理结果 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"data\": {\"type\": \"object\", \r",
									"                \"properties\": {\"pos\": {\"type\": \"array\"},\r",
									"                               \"word\": {\"type\": \"array\"}},\r",
									"        },\r",
									"        \"errCode\": {\"type\": \"string\"},\r",
									"},\r",
									"    \"require\": [\"data\", \"errCode\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errCode).to.eql(\"0\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"content\", \"北京的天气\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{content}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/kdxf_nlp",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"kdxf_nlp"
							]
						}
					},
					"response": []
				},
				{
					"name": "kdxf_nlp_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"    pm.expect(pm.response.text()).to.include(\"pos\");\r",
									"    pm.expect(pm.response.text()).to.include(\"word\")\r",
									"    // pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.be.an(\"object\"); \r",
									"    pm.expect(jsonData.data.pos).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.data.word).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errCode).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"科大讯飞 组合文本处理结果 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"data\": {\"type\": \"object\", \r",
									"                \"properties\": {\"pos\": {\"type\": \"array\"},\r",
									"                               \"word\": {\"type\": \"array\"}},\r",
									"        },\r",
									"        \"errCode\": {\"type\": \"string\"},\r",
									"},\r",
									"    \"require\": [\"data\", \"errCode\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errCode).to.eql(\"0\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"content\", \"截至6月19日，东方甄选直播间的图书销售排行榜上，销量排名前三的图书分别为人民文学出版社的《额尔古纳河右岸》、机械工业出版社的《刻意练习》，以及中南博集天卷的《苏东坡传》。\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{content}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/kdxf_nlp",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"kdxf_nlp"
							]
						}
					},
					"response": []
				},
				{
					"name": "kdxf_nlp_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"    pm.expect(pm.response.text()).to.include(\"pos\");\r",
									"    pm.expect(pm.response.text()).to.include(\"word\")\r",
									"    // pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.be.an(\"object\"); \r",
									"    pm.expect(jsonData.data.pos).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.data.word).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errCode).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"科大讯飞 组合文本处理结果 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"data\": {\"type\": \"object\", \r",
									"                \"properties\": {\"pos\": {\"type\": \"array\"},\r",
									"                               \"word\": {\"type\": \"array\"}},\r",
									"        },\r",
									"        \"errCode\": {\"type\": \"string\"},\r",
									"},\r",
									"    \"require\": [\"data\", \"errCode\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"content\", \"I have breakfast at 8am every day.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{content}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/kdxf_nlp",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"kdxf_nlp"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "qywx_message_send",
			"item": [
				{
					"name": "qywx_message_send_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"errcode\");\r",
									"    pm.expect(pm.response.text()).to.include(\"errmsg\");\r",
									"    pm.expect(pm.response.text()).to.include(\"msgid\")\r",
									"    // pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errcode).to.be.a(\"number\"); \r",
									"    pm.expect(jsonData.errmsg).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.msgid).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"企业微信发送文本消息 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"errcode\": {\"type\": \"number\"},\r",
									"        \"errmsg\": {\"type\": \"string\"},\r",
									"        \"msgid\": {\"type\": \"string\"},\r",
									"},\r",
									"    \"require\": [\"errcode\", \"errmsg\", \"msgid\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errcode).to.eql(0);\r",
									"    pm.expect(jsonData.errmsg).to.eql(\"ok\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"touser\", \"XXXXX\");\r",
									"pm.environment.set(\"msgtype\", \"text\");\r",
									"pm.environment.set(\"agentid\", \"1000002\");\r",
									"pm.environment.set(\"content\", \"试试企业微信\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"touser\": \"{{touser}}\",\r\n    \"msgtype\": \"{{msgtype}}\",\r\n    \"agentid\": \"{{agentid}}\",\r\n    \"content\": \"{{content}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/qywx_message_send",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"qywx_message_send"
							]
						}
					},
					"response": []
				},
				{
					"name": "qywx_message_send_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"errcode\");\r",
									"    pm.expect(pm.response.text()).to.include(\"errmsg\");\r",
									"    pm.expect(pm.response.text()).to.include(\"msgid\")\r",
									"    // pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errcode).to.be.a(\"number\"); \r",
									"    pm.expect(jsonData.errmsg).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.msgid).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"企业微信发送文本消息 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"errcode\": {\"type\": \"number\"},\r",
									"        \"errmsg\": {\"type\": \"string\"},\r",
									"        \"msgid\": {\"type\": \"string\"},\r",
									"},\r",
									"    \"require\": [\"errcode\", \"errmsg\", \"msgid\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errcode).to.eql(0);\r",
									"    pm.expect(jsonData.errmsg).to.eql(\"ok\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"touser\", \"XXXXX\");\r",
									"pm.environment.set(\"msgtype\", \"text\");\r",
									"pm.environment.set(\"agentid\", \"1000002\");\r",
									"pm.environment.set(\"content\", \"来，聊5毛钱的\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"touser\": \"{{touser}}\",\r\n    \"msgtype\": \"{{msgtype}}\",\r\n    \"agentid\": \"{{agentid}}\",\r\n    \"content\": \"{{content}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/flow/qywx_message_send",
							"host": [
								"{{url}}"
							],
							"path": [
								"flow",
								"qywx_message_send"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "amap_qywx",
			"item": [
				{
					"name": "amap_qywx_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var cities = pm.environment.get(\"cities\");\r",
									"console.log(cities);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"errcode\");\r",
									"    pm.expect(pm.response.text()).to.include(\"errmsg\");\r",
									"    pm.expect(pm.response.text()).to.include(\"msgid\")\r",
									"    // pm.expect(pm.response.text()).to.contains(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"///\r",
									"pm.test(\"response json type check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errcode).to.be.a(\"number\"); \r",
									"    pm.expect(jsonData.errmsg).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.msgid).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//判断响应结果是否包含指定的字符串\r",
									"var schema = {\r",
									"    \"title\": \"Response schema check\",\r",
									"    \"description\": \"企业微信发送文本消息 schema check\",\r",
									"    \"type\": \"object\", // 类型为对象类型\r",
									"    \"properties\": {\r",
									"        \"errcode\": {\"type\": \"number\"},\r",
									"        \"errmsg\": {\"type\": \"string\"},\r",
									"        \"msgid\": {\"type\": \"string\"},\r",
									"},\r",
									"    \"require\": [\"errcode\", \"errmsg\", \"msgid\"] // 结构中必须包含error_code和data   \r",
									"};\r",
									"\r",
									"// var schema = {\r",
									"// };\r",
									"\r",
									"pm.test(\"Response schema check\", function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//这两种校验方式选哪种好呢\r",
									"pm.test('Schema is valid', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;  \r",
									"});\r",
									"\r",
									"pm.test(\"Check response value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errcode).to.eql(0);\r",
									"    pm.expect(jsonData.errmsg).to.eql(\"ok\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",

									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.get(\"city\");\r",
									"pm.environment.set(\"cities\", [\"sh\", \"bj\", \"sh\", \"sh\"]);\r",
									"pm.environment.set(\"image\", \"https://img.zcool.cn/community/01ff2059770a25a8012193a37c7695.jpg\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followOriginalHttpMethod": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cities\": \"{{cities}}\",\r\n    \"image\": \"{{image}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/schedule/amap_qywx",
							"host": [
								"{{url}}"
							],
							"path": [
								"schedule",
								"amap_qywx"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}